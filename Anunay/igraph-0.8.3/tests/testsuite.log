## -------------------------------- ##
## igraph 0.8.3 test suite: igraph. ##
## -------------------------------- ##

testsuite: command line was:
  $ testsuite 

## ---------- ##
## ChangeLog. ##
## ---------- ##

| See CHANGELOG.md for a list of changes between versions.
## --------- ##
## Platform. ##
## --------- ##

hostname = alphaq2-HP-Laptop-15g-br1xx
uname -m = x86_64
uname -r = 4.15.0-114-generic
uname -s = Linux
uname -v = #115-Ubuntu SMP Tue Aug 11 09:47:51 UTC 2020

/usr/bin/uname -p = unknown
/bin/uname -X     = unknown

/bin/arch              = unknown
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
/usr/bin/hostinfo      = unknown
/bin/machine           = unknown
/usr/bin/oslevel       = unknown
/bin/universe          = unknown

PATH: /home/alphaq2/Desktop/project/BTP/Bias-in-CDA/Anunay/igraph-0.8.3/src/.libs
PATH: /home/alphaq2/.local/bin
PATH: /usr/local/sbin
PATH: /usr/local/bin
PATH: /usr/sbin
PATH: /usr/bin
PATH: /sbin
PATH: /bin
PATH: /usr/games
PATH: /usr/local/games
PATH: /usr/lib/jvm/jdk-12.0.2
PATH: /snap/bin

testsuite: atconfig:
| # Configurable variable values for building test suites.
| # Generated by ./config.status.
| # Copyright (C) 2012 Free Software Foundation, Inc.
| 
| # The test suite will define top_srcdir=/../.. etc.
| at_testdir='tests'
| abs_builddir='/home/alphaq2/Desktop/project/BTP/Bias-in-CDA/Anunay/igraph-0.8.3/tests'
| at_srcdir='.'
| abs_srcdir='/home/alphaq2/Desktop/project/BTP/Bias-in-CDA/Anunay/igraph-0.8.3/tests'
| at_top_srcdir='..'
| abs_top_srcdir='/home/alphaq2/Desktop/project/BTP/Bias-in-CDA/Anunay/igraph-0.8.3'
| at_top_build_prefix='../'
| abs_top_builddir='/home/alphaq2/Desktop/project/BTP/Bias-in-CDA/Anunay/igraph-0.8.3'
| 
| # Backward compatibility with Autotest <= 2.59b:
| at_top_builddir=$at_top_build_prefix
| 
| AUTOTEST_PATH='/home/alphaq2/Desktop/project/BTP/Bias-in-CDA/Anunay/igraph-0.8.3/src/.libs'
| 
| SHELL=${CONFIG_SHELL-'/bin/bash'}

testsuite: atlocal:
| # tests/atlocal.  Generated from atlocal.in by configure.
| # Configurable variable values for igraph test suite. Taken from bison source.
| # Copyright 2000, 2001, 2002 Free Software Foundation, Inc.
| 
| # We need a C compiler.
| CC='gcc'
| CFLAGS=' -I/usr/include/libxml2 -O3  -Wall '
| 
| # We need `config.h'.
| CPPFLAGS="-I$abs_top_builddir  -O3 -DIGRAPH_VERIFY_FINALLY_STACK=0"
| 
| # SED command to convert a trailing CRLF to LF (incl. leading pipe sign).
| # The variable should be empty if conversion is not needed.
| SED_PIPE_CRLF2LF=

## ---------------- ##
## Tested programs. ##
## ---------------- ##

## ------------------ ##
## Running the tests. ##
## ------------------ ##
testsuite: starting at: Tue Nov  3 16:42:56 IST 2020
1. Simple version query (igraph_version):  (version.at:26): ok     (0m0.116s 0m0.029s)
2. Vector (vector_t):  (types.at:24): ok     (0m0.186s 0m0.017s)
3. Vector (more) (vector_t):  (types.at:29): ok     (0m0.146s 0m0.017s)
4. Vector (even more) (vector_t):  (types.at:34): ok     (0m0.124s 0m0.013s)
5. Matrix (matrix_t):  (types.at:39): ok     (0m0.149s 0m0.024s)
6. Matrix (more) (matrix_t):  (types.at:44): ok     (0m0.175s 0m0.023s)
7. Matrix (even more) (matrix_t):  (types.at:49): ok     (0m0.118s 0m0.023s)
8. Double ended queue (dqueue_t):  (types.at:54): ok     (0m0.125s 0m0.031s)
9. Vector of pointers (vector_ptr_t):  (types.at:59): ok     (0m0.151s 0m0.023s)
10. Stack (stack_t):  (types.at:64): ok     (0m0.134s 0m0.012s)
11. Heap (heap_t):  (types.at:69): ok     (0m0.059s 0m0.028s)
12. Indexed heap (indheap_t):  (types.at:74): ok     (0m0.070s 0m0.013s)
13. Doubly indexed heap (d_indheap_t):  (types.at:79): ok     (0m0.126s 0m0.020s)
14. String vector (igraph_strvector_t):  (types.at:84): ok     (0m0.151s 0m0.015s)
15. Trie (igraph_trie_t):  (types.at:89): ok     (0m0.126s 0m0.021s)
16. Partial Sum-Tree (igraph_psumtree_t):  (types.at:95): ok     (0m0.157s 0m0.028s)
17. Three dimensional array (igraph_array3_t):  (types.at:100): ok     (0m0.138s 0m0.018s)
18. Hash table (string->string) (igraph_hashtable_t):  (types.at:105): ok     (0m0.132s 0m0.021s)
19. Special heap for minimum cuts (igraph_i_cutheap_t):  (types.at:111): ok     (0m0.142s 0m0.013s)
20. Set (igraph_set_t):  (types.at:117): ok     (0m0.130s 0m0.021s)
21. 2-way heap (igraph_2wheap_t):  (types.at:123): ok     (0m0.146s 0m0.017s)
22. Sparse matrix (igraph_sparsemat_t):  (types.at:128): ok     (0m0.147s 0m0.008s)
23. Sparse matrix, multiplications (igraph_sparsemat_t):  (types.at:133): ok     (0m0.175s 0m0.023s)
24. Sparse matrix, indexing (igraph_sparsemat_t):  (types.at:139): ok     (0m0.180s 0m0.020s)
25. Sparse matrix, solvers (igraph_sparsemat_t):  (types.at:145): ok     (0m0.142s 0m0.036s)
26. Sparse matrix, ARPACK eigensolver (igraph_sparsemat_t):  (types.at:151): ok     (0m0.175s 0m0.011s)
27. Sparse matrix, conversion to dense (igraph_sparsemat_t):  (types.at:156): ok     (0m0.110s 0m0.033s)
28. Sparse matrix, min & max (igraph_sparsemat_t):  (types.at:161): ok     (0m0.137s 0m0.005s)
29. Sparse matrix, other operations (igraph_sparsemat_t):  (types.at:166): ok     (0m0.132s 0m0.032s)
30. Sparse matrix, multiplications with dense (igraph_sparsemat_t):  (types.at:171): ok     (0m0.124s 0m0.023s)
31. Sparse matrix, is symmetric? (igraph_sparsemat_t):  (types.at:176): ok     (0m0.118s 0m0.026s)
32. Sparse matrix col/row min/max (igraph_sparsemat_t):  (types.at:181): ok     (0m0.147s 0m0.021s)
33. Sparse matrix which col/row min/max (igraph_sparsemat_t):  (types.at:187): ok     (0m0.162s 0m0.025s)
34. Another sparse matrix (igraph_spmatrix_t):  (types.at:193): ok     (0m0.164s 0m0.023s)
35. Arbitrarily big integers (igraph_biguint_t):  (types.at:198): ok     (0m0.130s 0m0.021s)
36. Marked double ended queue (igraph_marked_queue_t):  (types.at:203): ok     (0m0.131s 0m0.012s)
37. Complex numbers (igraph_complex_t):  (types.at:208): ok     (0m0.143s 0m0.024s)
38. Creating an empty graph (igraph_empty):  (basic.at:26): ok     (0m0.122s 0m0.021s)
39. Copying a graph (igraph_copy):  (basic.at:31): ok     (0m0.134s 0m0.006s)
40. Adding edges to a graph (igraph_add_edges):  (basic.at:36): ok     (0m0.149s 0m0.009s)
41. Adding vertices (igraph_add_vertices):  (basic.at:42): ok     (0m0.123s 0m0.017s)
42. Deleting edges (igraph_delete_edges):  (basic.at:47): ok     (0m0.105s 0m0.041s)
43. Deleting vertices (igraph_delete_vertices):  (basic.at:52): ok     (0m0.121s 0m0.021s)
44. Neighbors (igraph_neighbors):  (basic.at:57): ok     (0m0.129s 0m0.025s)
45. Is the graph directed? (igraph_is_directed):  (basic.at:62): ok     (0m0.129s 0m0.011s)
46. Degree of the vertices (igraph_degree):  (basic.at:67): ok     (0m0.151s 0m0.015s)
47. Query edge ids (igraph_get_eid):  (basic.at:72): ok     (0m0.127s 0m0.022s)
48. Query many edge ids (igraph_get_eids):  (basic.at:77): ok     (0m0.161s 0m0.029s)
49. Vertices in a vector (igraph_vs_vector):  (iterators.at:24): ok     (0m0.130s 0m0.021s)
50. Non-adjacent vertices (igraph_vs_nonadj):  (iterators.at:29): ok     (0m0.136s 0m0.015s)
51. Sequence (igraph_vs_seq):  (iterators.at:34): ok     (0m0.128s 0m0.023s)
52. Edges given by end points (igraph_es_pairs):  (iterators.at:49): ok     (0m0.135s 0m0.027s)
53. Edges in a path (igraph_es_path):  (iterators.at:54): ok     (0m0.153s 0m0.025s)
54. Simple graph creation (igraph_create):  (structure_generators.at:24): ok     (0m0.113s 0m0.042s)
55. Barabasi-Albert model (igraph_barabasi_game): (structure_generators.at:29): ok     (0m0.181s 0m0.034s)
56. More Barabasi-Albert model (igraph_barabasi_game): (structure_generators.at:34): ok     (0m0.151s 0m0.014s)
57. Erdos-Renyi model (igraph_erdos_renyi_game): (structure_generators.at:39): ok     (0m0.609s 0m0.053s)
58. Degree sequence (igraph_degree_sequence_game): (structure_generators.at:44): ok     (0m0.213s 0m0.044s)
59. k-regular graphs (igraph_k_regular_game): (structure_generators.at:49): ok     (0m0.287s 0m0.068s)
60. Growing random (igraph_growing_random_game): (structure_generators.at:54): ok     (0m0.127s 0m0.029s)
61. Preference model (igraph_preference_game): (structure_generators.at:59): ok     (0m0.328s 0m0.073s)
62. From adjacency matrix (igraph_adjacency): (structure_generators.at:64): ok     (0m0.143s 0m0.050s)
63. From weighted adjacency matrix (igraph_weighted_adjacency): (structure_generators.at:69): ok     (0m0.200s 0m0.035s)
64. Star graph (igraph_star): (structure_generators.at:74): ok     (0m0.146s 0m0.033s)
65. Lattice graph (igraph_lattice): (structure_generators.at:79): ok     (0m0.187s 0m0.044s)
66. Ring graph (igraph_ring): (structure_generators.at:84): ok     (0m0.148s 0m0.031s)
67. Tree graph (igraph_tree): (structure_generators.at:89): ok     (0m0.252s 0m0.060s)
68. Tree graph 2 (igraph_tree): (structure_generators.at:94): ok     (0m0.189s 0m0.031s)
69. Tree graph from Prufer sequence (igraph_from_prufer): (structure_generators.at:99): ok     (0m0.243s 0m0.043s)
70. Full graph (igraph_full): (structure_generators.at:104): ok     (0m0.110s 0m0.037s)
71. Graph atlas (igraph_atlas): (structure_generators.at:109): ok     (0m0.215s 0m0.046s)
72. Small graph (igraph_small): (structure_generators.at:114): ok     (0m0.169s 0m0.030s)
73. Geomeric random graphs (igraph_grg_game): (structure_generators.at:119): ok     (0m0.100s 0m0.035s)
74. Graphs in LCF notation (igraph_lcf{,_vector}): (structure_generators.at:124): ok     (0m0.213s 0m0.045s)
75. Watts-Strogatz graphs (igraph_watts_strogatz_game): (structure_generators.at:129): ok     (0m0.262s 0m0.051s)
76. Correlated random graphs (igraph_correlated_game): (structure_generators.at:134): ok     (0m0.185s 0m0.024s)
77. Realize a degree sequence (igraph_realize_degree_sequence): (structure_generators.at:139): ok     (0m0.161s 0m0.022s)
78. Two vertices connected by an edge: (structural_properties.at:24): ok     (0m0.222s 0m0.032s)
79. Density of a graph (igraph_density): (structural_properties.at:29): ok     (0m0.175s 0m0.018s)
80. Diameter of a graph (igraph_diameter): (structural_properties.at:34): ok     (0m0.216s 0m0.031s)
81. Average geodesic length (igraph_average_path_length):  (structural_properties.at:39): ok     (0m0.255s 0m0.038s)
82. Google PageRank (igraph_pagerank):  (structural_properties.at:44): ok     (0m0.420s 0m0.043s)
83. Random rewiring (igraph_rewire):  (structural_properties.at:49): ok     (0m0.319s 0m0.062s)
84. Get the shortest paths (igraph_get_shortest_paths):  (structural_properties.at:54): ok     (0m0.231s 0m0.049s)
85. Get the shortest paths 2 (igraph_get_shortest_paths):  (structural_properties.at:60): ok     (0m0.174s 0m0.059s)
86. Weighted shortest paths (Dijkstra):  (structural_properties.at:66): ok     (0m0.139s 0m0.031s)
87. Weighted shortest paths (Bellman-Ford):  (structural_properties.at:71): ok     (0m0.145s 0m0.025s)
88. Get the weighted shortest paths (Dijkstra):  (structural_properties.at:76): ok     (0m0.311s 0m0.062s)
89. Get all weighted shortest paths (Dijkstra):  (structural_properties.at:82): ok     (0m0.267s 0m0.044s)
90. Get all simple paths:  (structural_properties.at:88): ok     (0m0.242s 0m0.034s)
91. Shortest path wrappers for single target node:  (structural_properties.at:94): ok     (0m0.244s 0m0.021s)
92. Betweenness (igraph_betweenness):  (structural_properties.at:100): ok     (0m0.785s 0m0.061s)
93. Betweenness, big integers (igraph_betweenness):  (structural_properties.at:106): ok     (0m1.215s 0m0.038s)
94. Edge betweenness (igraph_edge_betweenness):  (structural_properties.at:111): ok     (0m0.276s 0m0.027s)
95. Vertex closeness estimate (igraph_closeness):  (structural_properties.at:117): ok     (0m0.335s 0m0.055s)
96. Transitivity (igraph_transitivity):  (structural_properties.at:123): ok     (0m0.232s 0m0.050s)
97. Local transitivity (igraph_local_transitivity):  (structural_properties.at:128): ok     (0m0.161s 0m0.044s)
98. Reciprocity (igraph_reciprocity):  (structural_properties.at:133): ok     (0m0.222s 0m0.025s)
99. Minimum spanning tree (igraph_minimum_spanning_tree_*):  (structural_properties.at:138): ok     (0m0.202s 0m0.016s)
100. Cocitation and bibcoupling (igraph_cocitation,igraph_bibcoupling): (structural_properties.at:144): ok     (0m0.211s 0m0.046s)
101. Similarity coefficients (igraph_similarity_*): (structural_properties.at:149): ok     (0m0.299s 0m0.048s)
102. Simplification of non-simple graphs (igraph_simplify):  (structural_properties.at:154): ok     (0m0.213s 0m0.062s)
103. Topological sorting (igraph_topological_sorting, igraph_is_dag):  (structural_properties.at:159): ok     (0m0.245s 0m0.054s)
104. Feedback arc sets, Eades heuristics (igraph_feedback_arc_set):  (structural_properties.at:164): ok     (0m0.312s 0m0.087s)
105. Feedback arc sets, integer programming (igraph_feedback_arc_set):  (structural_properties.at:169): ok     (0m0.285s 0m0.056s)
106. Loop edges test (igraph_is_loop):  (structural_properties.at:174): ok     (0m0.152s 0m0.035s)
107. Multiple edges test (igraph_is_multiple):  (structural_properties.at:179): ok     (0m0.179s 0m0.030s)
108. Multiple edges test (igraph_has_multiple):  (structural_properties.at:184): ok     (0m0.316s 0m0.031s)
109. Count edge multiplicities (igraph_count_multiple):  (structural_properties.at:189): ok     (0m0.198s 0m0.049s)
110. Tree test (igraph_is_tree):  (structural_properties.at:194): ok     (0m0.342s 0m0.048s)
111. Girth (igraph_girth):  (structural_properties.at:199): ok     (0m0.153s 0m0.013s)
112. Convergence degree (igraph_convergence_degree):  (structural_properties.at:204): ok     (0m0.148s 0m0.010s)
113. Assortativity coefficient (igraph_assortativity):  (structural_properties.at:209): ok     (0m0.255s 0m0.022s)
114. Average nearest neighbor degree (igraph_avg_nearest_neighbor_degree):  (structural_properties.at:215): ok     (0m0.112s 0m0.033s)
115. Transitive closure of a DAG (igraph_transitive_closure_dag):  (structural_properties.at:220): ok     (0m0.117s 0m0.029s)
116. Eccentricity (igraph_eccentricity):  (structural_properties.at:226): ok     (0m0.127s 0m0.014s)
117. Radius (igraph_radius):  (structural_properties.at:232): ok     (0m0.128s 0m0.026s)
118. Decompose a graph (igraph_decompose): (components.at:24): ok     (0m0.139s 0m0.011s)
119. Decompose a graph into strongly connected components (igraph_decompose_strong): (components.at:29): ok     (0m0.199s 0m0.010s)
120. Biconnected components (igraph_biconnected_components): (components.at:34): ok     (0m0.128s 0m0.029s)
121. Bridges (igraph_bridges): (components.at:40): ok     (0m0.130s 0m0.014s)
122. Grid layout (igraph_layout_grid, igraph_layout_grid_3d): (layout.at:24): ok     (0m0.117s 0m0.033s)
123. Large Graph Layout (igraph_layout_lgl): (layout.at:29): ok     (0m0.128s 0m0.031s)
124. Reingold-Tilford tree layout (igraph_layout_reingold_tilford): (layout.at:34): ok     (0m0.112s 0m0.025s)
125. Reingold-Tilford tree layout extended (igraph_layout_reingold_tilford): (layout.at:40): ok     (0m0.175s 0m0.023s)
126. Reingold-Tilford tree layout, bug 879 (igraph_layout_reingold_tilford): (layout.at:46): ok     (0m0.164s 0m0.035s)
127. Sugiyama layout (igraph_layout_sugiyama): (layout.at:53): ok     (0m0.123s 0m0.031s)
128. Multidimensional scaling (igraph_layout_mds): (layout.at:58): ok     (0m0.129s 0m0.041s)
129. Covering circle and sphere (igraph_i_layout_sphere_{2,3}d): (layout.at:63): ok     (0m0.133s 0m0.022s)
130. Merging layouts (igraph_i_layout_merge): (layout.at:68): ok     (0m0.230s 0m0.009s)
131. Merging layouts 2 (igraph_i_layout_merge): (layout.at:73): ok     (0m0.148s 0m0.009s)
132. Merging layouts 3 (igraph_i_layout_merge): (layout.at:79): ok     (0m0.412s 0m0.033s)
133. Davidson-Harel layout (igraph_layout_davidson_harel): (layout.at:84): ok     (0m0.135s 0m0.017s)
134. Kamada-Kawai 3D layout bug with two vertices (igraph_layout_kamada_kawai_3d): (layout.at:89): ok     (0m0.170s 0m0.025s)
135. Internal breadth-first search (igraph_i_bfs): (visitors.at:24): ok     (0m0.141s 0m0.013s)
136. Breadth-first search (igraph_bfs): (visitors.at:29): ok     (0m0.138s 0m0.016s)
137. Random walk (igraph_random_edge_walk): (visitors.at:34): ok     (0m0.136s 0m0.018s)
138. The isomorphism class of a subgraph (igraph_isoclass_subgraph) (topology.at:24): ok     (0m0.130s 0m0.017s)
139. The VF2 isomorphism algorithm (topology.at:29): ok     (0m0.192s 0m0.020s)
140. The BLISS isomorphism algorithm (topology.at:34): ok     (0m0.129s 0m0.016s)
141. VF algorithm with compatibility functions (topology.at:40): ok     (0m0.151s 0m0.006s)
142. LAD subgraph isomorphism algorithm (topology.at:45): ok     (0m1.111s 0m0.123s)
143. Additional isomorphism tests (topology.at:51): ok     (0m0.203s 0m0.005s)
144. Simplify and colorize (topology.at:57): ok     (0m0.173s 0m0.032s)
145. Graphical degree sequences (topology.at:62): ok     (0m0.174s 0m0.027s)
146. Greedy vertex coloring (igraph_vertex_coloring_greedy):  (coloring.at:26): ok     (0m0.155s 0m0.020s)
147. RAND-ESU algorithm (igraph_motifs_randesu) (motifs.at:24): ok     (0m0.124s 0m0.034s)
148. Triad counts (igraph_triad_census): (motifs.at:29): ok     (0m0.131s 0m0.020s)
149. Reading Pajek (igraph_read_graph_pajek): (foreign.at:24): ok     (0m0.126s 0m0.021s)
150. GraphML (igraph_{read,write}_graph_graphml): (foreign.at:29): ok     (0m0.154s 0m0.009s)
151. Writing Pajek (igraph_write_graph_pajek): (foreign.at:35): ok     (0m0.129s 0m0.016s)
152. Pajek with number of edges present (igraph_read_graph_pajek): (foreign.at:41): ok     (0m0.126s 0m0.015s)
153. Pajek, bipartite (igraph_read_graph_pajek): (foreign.at:46): ok     (0m0.115s 0m0.032s)
154. Pajek, bipartite incidence matrix (igraph_read_graph_pajek): (foreign.at:52): ok     (0m0.209s 0m0.025s)
155. Pajek, signed (igraph_read_graph_pajek): (foreign.at:58): ok     (0m0.146s 0m0.015s)
156. Pajek, writing bipartite graph (igraph_write_graph_pajek): (foreign.at:64): ok     (0m0.184s 0m0.037s)
157. Reading an LGL file (igraph_read_graph_lgl): (foreign.at:69): ok     (0m0.119s 0m0.029s)
158. Writing LGL (igraph_write_graph_lgl): (foreign.at:76): ok     (0m0.066s 0m0.018s)
159. Reading a graph from the graph database (igraph_read_graph_graphdb): (foreign.at:81): ok     (0m0.126s 0m0.018s)
160. Reading a GML file (igraph_read_graph_gml): (foreign.at:88): ok     (0m0.116s 0m0.025s)
161. Writing a DOT file (igraph_write_graph_dot): (foreign.at:93): ok     (0m0.120s 0m0.022s)
162. Different line endings: (foreign.at:98): ok     (0m0.125s 0m0.019s)
163. UNICET DL format: (foreign.at:105): ok     (0m0.145s 0m0.008s)
164. LEDA format: (foreign.at:111): ok     (0m0.131s 0m0.019s)
165. Convex hull calculation (igraph_convex_hull): (other.at:24): ok     (0m0.148s 0m0.025s)
166. Fitting power-law distributions (igraph_power_law_fit): (other.at:29): ok     (0m0.184s 0m0.016s)
167. Disjoint union (igraph_disjoint_union, igraph_dosjoint_union_many): (operators.at:24): ok     (0m0.131s 0m0.027s)
168. Union (igraph_union, igraph_union_many): (operators.at:31): ok     (0m0.200s 0m0.032s)
169. Intersection (igraph_intersection, igraph_intersection_many): (operators.at:37): ok     (0m0.131s 0m0.026s)
170. Intersection 2 (igraph_intersection, igraph_intersection_many): (operators.at:43): ok     (0m0.123s 0m0.021s)
171. Difference (igraph_difference): (operators.at:49): ok     (0m0.137s 0m0.015s)
172. Complementer (igraph_complementer): (operators.at:55): ok     (0m0.117s 0m0.023s)
173. Composition (igraph_compose): (operators.at:61): ok     (0m0.113s 0m0.034s)
174. Induced subgraph (igraph_induced_subgraph):  (operators.at:67): ok     (0m0.132s 0m0.013s)
175. Directed to undirected (igraph_to_undirected): (conversion.at:24): ok     (0m0.110s 0m0.026s)
176. Graphs from adjacency list (igraph_adjlist): (conversion.at:30): ok     (0m0.116s 0m0.020s)
177. Graph to Laplacian matrix (igraph_laplacian): (conversion.at:35): ok     (0m0.151s 0m0.026s)
178. Tree to prufer sequence (igraph_to_prufer): (conversion.at:41): ok     (0m0.143s 0m0.017s)
179. Maximum flow value (igraph_maxflow_value):  (flow.at:24): ok     (0m0.294s 0m0.016s)
180. Maximum flow (igraph_maxflow):  (flow.at:29): ok     (0m0.331s 0m0.019s)
181. Minimum cut (igraph_mincut):  (flow.at:34): ok     (0m0.131s 0m0.020s)
182. Even-Tarjan reduction (igraph_even_tarjan_reduction):  (flow.at:39): ok     (0m0.369s 0m0.010s)
183. Dominator tree of a flow graph (igraph_dominator_tree):  (flow.at:44): ok     (0m0.130s 0m0.016s)
184. All s-t cuts of a graph (igraph_all_st_cuts):  (flow.at:50): ok     (0m0.268s 0m0.011s)
185. All minimal s-t cuts of a graph (igraph_all_st_mincuts):  (flow.at:56): ok     (0m0.143s 0m0.025s)
186. Gomory-Hu tree (igraph_gomory_hu_tree):  (flow.at:62): ok     (0m0.144s 0m0.015s)
187. Spinglass clustering (igraph_spinglass_community):  (community.at:24): ok     (0m0.129s 0m0.027s)
188. Walktrap community structure (igraph_walktrap_community):  (community.at:29): ok     (0m0.122s 0m0.024s)
189. Edge betweenness community structure (igraph_community_edge_betweenness):  (community.at:34): ok     (0m0.180s 0m0.014s)
190. Modularity optimization (igraph_community_fastgreedy):  (community.at:40): ok     (0m0.164s 0m0.035s)
191. Leading eigenvector community structure (igraph_community_leading_eigenvector) : (community.at:46): ok     (0m0.141s 0m0.025s)
192. Weighted leading eigenvector community structure (igraph_community_leading_eigenvector) : (community.at:52): ok     (0m0.141s 0m0.027s)
193. Leading eigenvector bug 1002140 test (igraph_community_leading_eigenvector) : (community.at:58): ok     (0m0.926s 0m0.351s)
194. Fluid communities algorithm (igraph_community_fluid_communities) : (community.at:63): ok     (0m0.174s 0m0.023s)
195. Label propagation algorithm (igraph_community_label_propagation) : (community.at:69): ok     (0m0.179s 0m0.036s)
196. Multilevel community detection (igraph_community_multilevel) : (community.at:75): ok     (0m0.138s 0m0.018s)
197. Multilevel community detection, isolates (igraph_community_multilevel) : (community.at:81): ok     (0m0.121s 0m0.022s)
198. Leiden community detection (igraph_community_leiden) : (community.at:86): ok     (0m0.214s 0m0.014s)
199. Modularity optimization, integer programming (igraph_community_optimal_modularity) : (community.at:92): ok     (0m0.555s 0m0.047s)
200. Infomap community structure (igraph_community_infomap) : (community.at:97): ok     (0m1.442s 0m0.026s)
201. Calculating cliques (igraph_cliques):  (cliques.at:26): ok     (0m0.164s 0m0.006s)
202. Additional test for maximal cliques (igraph_maximal_cliques): (cliques.at:31): ok     (0m0.159s 0m0.019s)
203. More maximal cliques (igraph_maximal_cliques): (cliques.at:37): ok     (0m0.118s 0m0.043s)
204. Maximal cliques 3 (igraph_maximal_cliques): (cliques.at:43): ok     (0m0.627s 0m0.030s)
205. Maximal cliques for a subset (igraph_maximal_cliques): (cliques.at:49): ok     (0m0.184s 0m0.017s)
206. Maximal cliques callback (igraph_maximal_cliques_callback): (cliques.at:55): ok     (0m0.181s 0m0.024s)
207. Maximal cliques histogram (igraph_maximal_cliques_hist): (cliques.at:60): ok     (0m0.189s 0m0.014s)
208. Weighted cliques (igraph_weighted_cliques): (cliques.at:66): ok     (0m0.169s 0m0.020s)
209. Calculating independent vertex sets (igraph_independent_vertex_sets):  (cliques.at:72): ok     (0m0.151s 0m0.015s)
210. Symmetric matrix, LAPACK (igraph_eigen_matrix_symmetric): (eigen.at:24): ok     (0m0.128s 0m0.033s)
211. Symmetric matrix, ARPACK (igraph_eigen_matrix_symmetric): (eigen.at:30): ok     (0m0.138s 0m0.029s)
212. General matrix, LAPACK, LM, SM (igraph_eigen_matrix): (eigen.at:36): ok     (0m0.142s 0m0.018s)
213. General matrix, LAPACK, LR, SR (igraph_eigen_matrix): (eigen.at:42): ok     (0m0.128s 0m0.028s)
214. General matrix, LAPACK, LI, SI (igraph_eigen_matrix): (eigen.at:48): ok     (0m0.144s 0m0.010s)
215. General matrix, LAPACK, SELECT (igraph_eigen_matrix): (eigen.at:54): ok     (0m0.140s 0m0.026s)
216. Reading a Pajek file with attributes: (attributes.at:24): ok     (0m0.209s 0m0.024s)
217. Writing an attributed graph in GML and GraphML: (attributes.at:30): ok     (0m0.123s 0m0.029s)
218. Combining numeric attributes: (attributes.at:35): ok     (0m0.124s 0m0.029s)
219. Combining string attributes: (attributes.at:40): ok     (0m0.117s 0m0.030s)
220. Combining Boolean attributes: (attributes.at:45): ok     (0m0.134s 0m0.020s)
221. Boolean graph attribute bug: (attributes.at:50): ok     (0m0.133s 0m0.012s)
222. Boolean graph attribute bug 2: (attributes.at:55): ok     (0m0.163s 0m0.041s)
223. Basic BLAS functions (igraph_blas_*): (arpack.at:24): ok     (0m0.131s 0m0.016s)
224. Dense symmetric eigenvalues and eigenvectors (igraph_lapack_dsyevr): (arpack.at:30): ok     (0m0.148s 0m0.027s)
225. Dense non-symmetric eigenvalues and eigenvectors (igraph_lapack_dgeev): (arpack.at:35): ok     (0m0.150s 0m0.033s)
226. Dense non-symmetric eigenvalues and eigenvectors (igraph_lapack_dgeevx): (arpack.at:40): ok     (0m0.151s 0m0.027s)
227. Solving linear systems with LU factorization (igraph_lapack_dgesv): (arpack.at:45): ok     (0m0.149s 0m0.017s)
228. Upper Hessenberg transformation (igraph_lapack_dgehrd): (arpack.at:51): ok     (0m0.118s 0m0.026s)
229. Eigenvector centrality (igraph_eigenvector_centrality): (arpack.at:57): ok     (0m0.119s 0m0.036s)
230. Non-symmetric ARPACK solver (igraph_arpack_rnsolve): (arpack.at:63): ok     (0m0.162s 0m0.021s)
231. Create bipartite graphs (igraph_create_bipartite): (bipartite.at:24): ok     (0m0.131s 0m0.020s)
232. Projection of bipartite graphs (igraph_bipartite_projection): (bipartite.at:30): ok     (0m0.152s 0m0.014s)
233. Centralization (igraph_centralization_*): (centralization.at:24): ok     (0m0.120s 0m0.025s)
234. Decision problem (igraph_is_separator):  (separators.at:24): ok     (0m0.125s 0m0.023s)
235. Decision problem, minimal separator (igraph_is_minimal separator):  (separators.at:29): ok     (0m0.120s 0m0.021s)
236. Minimal separators (igraph_all_minimal_ab_separators):  (separators.at:34): ok     (0m0.120s 0m0.024s)
237. Minimal separators, bug 1033045 (igraph_all_minimal_st_separators):  (separators.at:39): ok     (0m0.110s 0m0.029s)
238. Minimum size separators (igraph_minimum_size_separators):  (separators.at:44): ok     (0m0.136s 0m0.031s)
239. Cohesive blocking (igraph_cohesive_blocks):  (separators.at:50): ok     (0m0.179s 0m0.028s)
240. Fitting a hierarchical model (igraph_hrg_fit) : (hrg.at:24): ok     (0m0.281s 0m0.018s)
241. Consensus tree (igraph_hrg_consensus) : (hrg.at:29): ok     (0m0.529s 0m0.022s)
242. Missing edge prediction (igraph_hrg_predict) : (hrg.at:34): ok     (0m0.370s 0m0.017s)
243. Deterministic optimal imitation: (microscopic.at:23): ok     (0m0.140s 0m0.021s)
244. Stochastic imitation via uniform selection: (microscopic.at:28): ok     (0m0.155s 0m0.022s)
245. Stochastic imitation via roulette selection: (microscopic.at:33): ok     (0m0.166s 0m0.013s)
246. Moran process: (microscopic.at:38): ok     (0m0.139s 0m0.020s)
247. Simple error handling test : (mt.at:24): skipped (mt.at:26)
248. Thread-safe ARPACK: (mt.at:29): skipped (mt.at:32)
249. Solving the SCG problem (igraph_scg_grouping) : (scg.at:24): ok     (0m0.538s 0m0.053s)
250. Solving the SCG problem, adjacency matrix (igraph_scg_grouping) : (scg.at:30): ok     (0m0.113s 0m0.027s)
251. Solving the SCG problem, stochastic matrix (igraph_scg_grouping) : (scg.at:36): ok     (0m0.136s 0m0.015s)
252. Solving the SCG problem, laplacian matrix (igraph_scg_grouping) : (scg.at:42): ok     (0m0.122s 0m0.025s)
253. SCG semi-projectors, symmetric (igraph_scg_semiprojectors) : (scg.at:48): ok     (0m0.121s 0m0.027s)
254. SCG semi-projectors, stochastic (igraph_scg_semiprojectors) : (scg.at:54): ok     (0m0.144s 0m0.020s)
255. SCG semi-projectors, laplacian (igraph_scg_semiprojectors) : (scg.at:60): ok     (0m0.131s 0m0.029s)
256. SCG of a graph, adjacency matrix (igraph_scg) : (scg.at:66): ok     (0m0.154s 0m0.020s)
257. SCG of a graph, stochastic matrix (igraph_scg) : (scg.at:71): ok     (0m0.212s 0m0.018s)
258. SCG of a graph, laplacian matrix (igraph_scg) : (scg.at:76): ok     (0m0.191s 0m0.020s)
259. Random seed: (random.at:24): ok     (0m0.130s 0m0.008s)
260. RNG reproducibility: (random.at:29): ok     (0m0.118s 0m0.025s)
261. MT19937 RNG on 64 bit machines: (random.at:35): ok     (0m0.114s 0m0.022s)
262. Exponentially distributed random numbers: (random.at:40): ok     (0m0.131s 0m0.009s)
263. Random sampling from consecutive sequence: (random.at:46): ok     (0m0.144s 0m0.012s)
264. Fisher-Yates shuffle: (random.at:51): ok     (0m0.132s 0m0.010s)
265. Regular qsort (igraph_qsort): (qsort.at:24): ok     (0m0.137s 0m0.014s)
266. qsort with extra argument (igraph_qsort_r): (qsort.at:29): ok     (0m0.128s 0m0.028s)
267. Maximum bipartite matching (igraph_maximum_bipartite_matching):  (matching.at:23): ok     (0m0.172s 0m0.021s)
268. Adjacency spectral embedding (igraph_adjacency_spectral_embedding):  (embedding.at:23): ok     (0m0.183s 0m0.017s)
testsuite: ending at: Tue Nov  3 16:43:59 IST 2020
testsuite: test suite duration: 0h 1m 3s

## ------------- ##
## Test results. ##
## ------------- ##

266 tests were successful.
2 tests were skipped.
